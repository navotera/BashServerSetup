- name: install Modsecurity 3 latest version
  hosts: localhost
  connection: local

  vars:
    type: "nginx"
    modsecurity_download_url: "https://api.github.com/repositories/1320594/releases/latest"
    connector_url: "https://github.com/SpiderLabs/ModSecurity-nginx"
    coreruleset_repo: "https://github.com/coreruleset/coreruleset.git"
    wordpress_plugin_repo: "https://github.com/coreruleset/wordpress-rule-exclusions-plugin.git"
    unicode_mapping_url: "https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping"
    base_dir: "/tmp/modsecurity"
    modsec_webserver_dir: "/tmp/modsecurity/{{type}}/"
    webserver_modsec_dir: "/etc/{{type}}/modsecurity.d"  
    connector_dir: "/tmp/nginx-connector"
    
  tasks:
  
    - name: Install required packages
      apt:
        name:
          - apt-utils
          - autoconf
          - automake
          - build-essential
          - libpcre3-dev
          - libcurl4-openssl-dev
          - libgeoip-dev
          - liblmdb-dev
          - libpcre++-dev
          - libtool
          - libyajl-dev
          - libxml2-dev
          - pkgconf
          - zlib1g-dev
          - doxygen
          - valgrind
        state: present
        update_cache: yes
      register: install_needed
      retries: 5
      until: install_needed is success


    - name: Create directories
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /var/cache/modsecurity
        - "{{webserver_modsec_dir}}/exception"


    - name: Fetch the latest release data from GitHub API
      uri:
        url: "{{modsecurity_download_url}}"
        return_content: yes
      register: release_data

    - name: Extract the browser_download_url ending with .tar.gz
      set_fact:
        tarball_url: "{{ item.browser_download_url }}"
      with_items: "{{ release_data.json.assets }}"
      when: item.browser_download_url | regex_search('.tar.gz$')
      register: tarball_url_result


    - name: Create the {{base_dir}} directory if it doesn't exist
      file:
        path: "{{base_dir}}"
        state: directory
        mode: '0755'

    - name: Download the tarball file to /tmp/modsecurity directory
      get_url:
        url: "{{ tarball_url_result.results[0].ansible_facts.tarball_url }}"
        dest: "{{base_dir}}"
      when: tarball_url_result.results[0].ansible_facts.tarball_url is defined

    - name: change file name 
      shell : for file in /tmp/modsecurity/*.tar.gz; do mv "$file" /tmp/modsecurity/modsecurity.tar.gz; done
      when: tarball_url_result.results[0].ansible_facts.tarball_url is defined

    - name: Extract the tarball file to /tmp/modsecurity directory
      unarchive:
        src: "{{base_dir}}/modsecurity.tar.gz"
        dest: "{{base_dir}}"
        remote_src: yes
      when: tarball_url_result.results[0].ansible_facts.tarball_url is defined

    - name: Remove the tarball file and rename folder
      shell: |
        rm -f {{base_dir}}/modsecurity.tar.gz
        for folder in {{base_dir}}/*/; do
          mv "$folder" "{{base_dir}}/modsecurity/"
        done
        mv {{base_dir}}/modsecurity/* {{base_dir}}
        rm -r {{base_dir}}/modsecurity
      when: tarball_url_result.results[0].ansible_facts.tarball_url is defined


    - name: Build and install ModSecurity 
      block:
        - name: Build and install ModSecurity item build, configure, make and make install
          ansible.builtin.command:
            cmd: "{{ item }}"
            chdir: "{{base_dir}}/"
          retries: 3
          delay: 10
          with_items:
            - "./build.sh"
            - "./configure"
            - "make"
            - "make install"
      ignore_errors: true

    - name: Get nginx version number
      shell: nginx -v 2>&1 | awk -F' ' '{print $3}' | cut -d / -f 2
      register: nginx_version

    - name: Remove existing Nginx package
      ansible.builtin.package:
        name: nginx
        state: absent
      when: nginx_version.stdout is version('1.20', '<')

    - name: Add Nginx official repository
      ansible.builtin.apt_repository:
        repo: "ppa:ondrej/nginx"
        state: present
      when: nginx_version.stdout is version('1.20', '<')

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes  
      when: nginx_version.stdout is version('1.20', '<')  


    - name: Install the latest version of Nginx if below 1.20
      ansible.builtin.apt:
        name: nginx
        state: latest
      when: nginx_version.stdout is version('1.20', '<') 

    - name: Create ModsecDir
      file:
        path: "{{webserver_modsec_dir}}"
        state: directory

    - name: download nginx version -> {{nginx_version.stdout}}
      shell: |
        mkdir -p {{base_dir}}/nginx 
        cd {{base_dir}}/nginx 
        rm -f {{base_dir}}/nginx/nginx-{{nginx_version.stdout}}.tar.gz
        wget http://nginx.org/download/nginx-{{nginx_version.stdout}}.tar.gz 
        

    - name: Download file using wget
      ansible.builtin.get_url:
        url: "http://nginx.org/download/nginx-{{nginx_version.stdout}}.tar.gz"
        dest: "{{base_dir}}/nginx/nginx-{{nginx_version.stdout}}.tar.gz"


    - name: Extract the nginx 
      shell: tar zxvf {{base_dir}}/nginx/nginx-{{nginx_version.stdout}}.tar.gz

    - name: Extract the nginx 
      unarchive:
        src: "{{modsec_webserver_dir}}/nginx-{{nginx_version.stdout}}.tar.gz"
        dest: "{{modsec_webserver_dir}}"
        remote_src: yes

    - name: ModSec Nginx CloneConnector
      ansible.builtin.git:
        repo: "{{ connector_url }}"
        dest: "{{connector_dir}}"
        depth: 1
      retries: 10

    - name: Extract the tarball file to /tmp/modsecurity directory
      unarchive:
        src: "{{modsec_webserver_dir}}/nginx-{{nginx_version.stdout}}.tar.gz"
        dest: "{{modsec_webserver_dir}}"
        remote_src: yes
    
    - name: MakeModuleConnector
      block:
        - name: Build and install Nginx connector item build, configure, make and make install
          ansible.builtin.command:
            cmd: "{{ item }}"
            chdir: "{{modsec_webserver_dir}}/nginx-{{nginx_version.stdout}}/"
          retries: 3
          delay: 10
          with_items:
            - "./configure --with-compat --add-dynamic-module={{connector_dir}}"
            - "make modules"  
            - "./configure --with-compat --without-pcre2 --add-dynamic-module={{connector_dir}}" 
            - "make modules"        
      ignore_errors: true

    - name: Check that the folder nginx/modules exist
      stat:
        path: /etc/nginx/modules-availables
      register: modules_folder_result

    - name: ModSec::CopyToNginxModulesFolder
      shell: |
        cp {{modsec_webserver_dir}}/nginx-{{nginx_version.stdout}}/objs/ngx_http_modsecurity_module.so /etc/nginx/modules-available/
        ln -sf /etc/nginx/modules-available/ngx_http_modsecurity_module.so /etc/nginx/modules-enabled/ngx_http_modsecurity_module.so


    - name: Nginx::loadModuleModsecurity
      lineinfile:
        path: /etc/nginx/nginx.conf
        insertbefore: BOF
        line: "{{ item.line }}"
      with_items:
        - {
            line: "load_module /etc/nginx/modules-enabled/ngx_http_modsecurity_module.so;",
          }

    - name: ModSec::Rules::downloadRule
      get_url:
        url: 'https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended'
        dest: '{{webserver_modsec_dir}}'

    - name: ModSec::Rules::downloadUnicode
      get_url:
        url: 'https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping'
        dest: '{{webserver_modsec_dir}}'
  

    - name: ModSec::Rules::renamePrevModConfig
      shell: 'mv {{webserver_modsec_dir}}/modsecurity.conf-recommended {{webserver_modsec_dir}}/modsecurity.conf'

    - name: ModSec::Rules::activate
      shell: "sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/' {{webserver_modsec_dir}}/modsecurity.conf"

    - name: Modsec::edit::SecRequestBodyLimit
      shell: "sed -i 's/SecRequestBodyLimit 13107200/SecRequestBodyLimit 52428800/' {{webserver_modsec_dir}}/modsecurity.conf"

    - name: ModSec::CoreRule::Mkdir
      shell: "mkdir coreruleset"
      ignore_errors: yes

    - name: Get latest version of coreruleset OWASP
      uri:
        url: https://api.github.com/repos/coreruleset/coreruleset/releases/latest
        return_content: yes
      register: json_output 

    - name: Set CRS latest version
      ansible.builtin.set_fact:
        crs_version: "{{ json_output.json.tag_name | regex_replace('^v', '') }}"

    - name: Debug CRS version
      ansible.builtin.debug:
        msg: "The latest CRS version is {{ crs_version }}"

    - name: Download the latest version of coreruleset
      get_url:
        url: "https://github.com/coreruleset/coreruleset/archive/{{ json_output.json.tag_name }}.tar.gz"
        dest: "/tmp/coreruleset.tar.gz"

    - name: ModSec::CoreRule::Extract
      ansible.builtin.unarchive:
        src: /tmp/coreruleset.tar.gz
        dest: '{{webserver_modsec_dir}}'

    - name: ModSec::CoreRule::setCoresetFile 
      shell: "cd {{webserver_modsec_dir}}/coreruleset-{{ crs_version }}/ && cp crs-setup.conf.example crs-setup.conf"

    - name: Rename to owasp-crs
      shell: "mv {{webserver_modsec_dir}}/coreruleset-{{ crs_version }} {{webserver_modsec_dir}}/owasp-crs"


    - name: Create ModSecurity initialization file
      copy:
        content: |
          Include {{webserver_modsec_dir}}/modsecurity.conf
          Include {{webserver_modsec_dir}}/owasp-crs/crs-setup.conf
          Include {{webserver_modsec_dir}}/owasp-crs/plugins/*-config.conf
          Include {{webserver_modsec_dir}}/owasp-crs/plugins/*-before.conf
          Include {{webserver_modsec_dir}}/owasp-crs/plugins/*-after.conf
          Include {{webserver_modsec_dir}}/owasp-crs/rules/*.conf
          #Include {{webserver_modsec_dir}}/ojs/ojs.conf
        dest: "{{webserver_modsec_dir}}/init.conf" 



    - name: End play  ------------------------------
      meta: end_play 